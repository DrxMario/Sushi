%\VignetteIndexEntry{Sushi}
\documentclass{article}
\title{Sushi: An R/Bioconductor package for visualizing genomic data}
\author{Douglas H Phanstiel, Alan Boyle, Carlos Araya, and Mike Snyder}
\begin{document}
\SweaveOpts{concordance=TRUE}
\maketitle
\section{Introduction}

Sushi is an R package for plotting genomic data stored in multiple common genomic formats including bed, bedpe, bedgraph format. The flexible code allows for integration of the plots into multipanel figures that can include plots made by sushi, R basecode, or other R packages.  Sushi allows for simple flexible plotting of gene structures, transcript structures, sequencing tracks, ChIP seq peaks, chromatin interactions, GWAS results and other commen genomic data types.   


\section{Example datasets}
To illustrate how Sushi works, we have included several publicaly available data sets in the package Sushi. The data types include RNA-seq, ChIP-seq, ChIA-PET, and HiC data and can be loaded using the following commands

<<dataLoading>>=
library('Sushi')
Sushi_data = data(package = 'Sushi')
data(list = Sushi_data$results[,3]) 
@

\section{plotManhattan}

Manhattan plots can be plotted given SNPS and significance values in bed format.

<< fig = FALSE , echo = TRUE >>=
head(Sushi_GWAS.bed)
@

The 'plotManhattan' function is used to plot the data while the 'labelgenome' function is used to add the genome labels to the x-axis.

\begin{center}

<< fig = TRUE , echo = TRUE >>=
# make color palette
# make the plot
plotManhattan(bedfile=Sushi_GWAS.bed,pvalues=Sushi_GWAS.bed[,5],col=topo.colors,genome=Sushi_hg18_genome,cex=0.75)

# add labels
labelgenome(genome=Sushi_hg18_genome,side=1,scipen=20,n=4,scale="Mb",edgeblankfraction=0.20,line=.18,chromline=.5,scaleline=0.5)

# add y-axis
axis(side=2,las=2,tcl=.2)
mtext("log10(P)",side=2,line=1.75,cex=.75,font=2)
@
\end{center}






\section{plotHiC}

HiC interactio plots can be plotted given an interaction matrix in which row and column names are genomic coordiates and matrix values are some tye of interaction score.

<< fig = FALSE , echo = TRUE >>=
Sushi_HiC.matrix[100:105,100:105]
@

The 'plotHiC' function is used to plot the data while the 'labelgenome' function is used to add the genome labels to the x-axis.  'plotHiC' returns an object indicating the color palette and data range that can be fed into 'addlegend' to create a legend.

\begin{center}

<< fig = TRUE , echo = TRUE >>=

# set the genomic regions
chrom            = "chr11"
chromstart       = 500000
chromend         = 5050000

# plot the HiC data
phic = plotHic(Sushi_HiC.matrix,chrom,chromstart,chromend,max_y = 20,zrange=c(0,28),flip=FALSE)

# add the legend
addlegend(phic[[1]],palette=phic[[2]],title="score",side="right",bottominset=0.4,topinset=0,xoffset=-.035,labelside="left",width=0.025,title.offset=0.035)

# add labels
labelgenome(chrom,chromstart,chromend,side=1,scipen=20,n=4,scale="Mb",edgeblankfraction=0.20,line=.18,chromline=.5,scaleline=0.5)


@
\end{center}

plotHic has a number of customizable options.  The plot can be flipped over the x-axis by setting flip = TRUE.  The color palette can be changed by the palette argument. 

addlegend also has customizable features.  The legend can be moved to the left side of the plot by setting side = "left" and the labeling canbe moved to the right side of the lenged buy setting labelside = "right".  The vertical position of the legend can be adjusted by changing the topinset and bottominset.

Finally, the x-axis label can be moved to the top of the plot by setting side = 3 in the labelgenome function.

\begin{center}

<< fig = TRUE , echo = TRUE >>=

# set the genomic regions
chrom            = "chr11"
chromstart       = 500000
chromend         = 5050000

# plot the HiC data
phic = plotHic(Sushi_HiC.matrix,chrom,chromstart,chromend,max_y = 20,zrange=c(0,28),flip=TRUE,palette=colorRampPalette(c("black","blue","#5900E5","#E5001B","orange","yellow","white")))

# add the legend
addlegend(phic[[1]],palette=phic[[2]],title="score",side="left",bottominset=0.1,topinset=0.5,xoffset=-.035,labelside="right",width=0.025,title.offset=0.035)

# add labels
labelgenome(chrom,chromstart,chromend,side=3,scipen=20,n=4,scale="Mb",edgeblankfraction=0.20,line=.18,chromline=.5,scaleline=0.5)
@
\end{center}



\section{plotBedpe}

plotBedpe allows for data in bedpe format to be plotted in multiple fashions.  To illustrate this we will use 5C data formatted in the following way.

<< fig = FALSE , echo = TRUE >>=
head(Sushi_5C.bedpe)
@

plotBedpe can plot bedpe as arches.  The height, linewidth, and color of each arch can be scaled to represent different aspects of the data.  Here the height of the arches represents the Z-score of the 5C interaction, the color represents the cell line each interaction was detected in, and the line widths are kept constant.

\begin{center}

<< fig = TRUE , echo = TRUE >>=
# set the genomic regions
chrom            = "chr11"
chromstart       = 1650000
chromend         = 2350000

# plot the loops
pbpe = plotbedpe(Sushi_5C.bedpe,chrom,chromstart,chromend,heights = Sushi_5C.bedpe$score,offset=0,
                 flip=FALSE,bty='n',lwd=1,plottype="loops",colorby=Sushi_5C.bedpe$samplenumber,
                 colorbycol=colorRampPalette(c("#5900E5","#E5001B","orange")))

# add the genome labels
labelgenome(chrom, chromstart,chromend,side=1,scipen=20,n=3,scale="Mb",line=.18,chromline=.5,scaleline=0.5)

# add the legend
legend("topright",inset =0.01,legend=c("K562","HeLa","GM12878"),col=c("#5900E5","#E5001B","orange"),pch=19,bty='n',text.font=2)

# add y-axis
axis(side=2,las=2,tcl=.2)
mtext("Z-score",side=2,line=1.75,cex=.75,font=2)
@
\end{center}

The plot can be flipped over the x-axis by setting flip = TRUE,  Bedpe elements can be represented by boxes and straight lines by setting plottype = "lines".  And colors can be used to represent Z-scores by setting colorby = "Sushi_5C.bedpe$score". 

\begin{center}

<< fig = TRUE , echo = TRUE >>=
# set the genomic regions
chrom            = "chr11"
chromstart       = 1650000
chromend         = 2350000

# plot the lines
pbpe = plotbedpe(Sushi_5C.bedpe,chrom,chromstart,chromend,offset=0,
                 flip=TRUE,bty='n',lwd=1,plottype="lines",colorby=Sushi_5C.bedpe$score,
                 colorbycol=colorRampPalette(c("black","blue","#5900E5","#E5001B","orange","yellow","white")))

# add the genome labels
labelgenome(chrom, chromstart,chromend,side=3,scipen=20,n=3,scale="Mb",line=.18,chromline=.5,scaleline=0.5)

# add the legend
addlegend(pbpe[[1]],palette=pbpe[[2]],title="Z-score",side="right",bottominset=0.05,topinset=0.05,xoffset=-.035,labelside="right",width=0.025,title.offset=0.035)
@

\end{center}




\section{plotBedgraph}

Signal tracks can be plotted using the plotBedgraph.  The input requires data in bedgrpah format

<< fig = FALSE , echo = TRUE >>=
head(Sushi_DNaseI.bedgraph)
@

The 'plotBedgraph' function is used to plot the data while the 'labelgenome' function is used to add the genome labels to the x-axis.  The y-axis in added use basic R functions.

\begin{center}

<< fig = TRUE , echo = TRUE >>=
# set the genomic regions
chrom            = "chr11"
chromstart       = 1650000
chromend         = 2350000

# overlapping, transparent, and rescaled
plotBedgraph(Sushi_DNaseI.bedgraph,chrom,chromstart,chromend,transparency=1.0,color="#5900E5",lwd=1,linecol="#5900E5")

# add the genome labels
labelgenome(chrom,chromstart,chromend,side=1,scipen=20,n=4,line=.18,chromline=.5,scaleline=0.5,scale="Mb")

# add y-axis
axis(side=2,las=2,tcl=.2)
mtext("Read Depth",side=2,line=1.75,cex=1,font=2)

@
\end{center}

Multiple bedgraph tracks can be plotted on the same plot by setting overlay=TRUE.  Transparencies can be added for easier viewing by adjusting the transcparency value.  The second plot can be rescaled to the maximum of the first plot by setting rescaleoverlay=TRUE.

\begin{center}
<< fig = TRUE , echo = TRUE >>=
# set the genomic regions
chrom            = "chr11"
chromstart       = 1955000
chromend         = 1960000

# plot chip-seq data
plotBedgraph(Sushi_ChIPSeq_CTCF.bedgraph,chrom,chromstart,chromend,transparency=.50,flip=FALSE,color="blue",linecol="blue")

# plot dnaseI data
plotBedgraph(Sushi_DNaseI.bedgraph,chrom,chromstart,chromend,transparency=.50,flip=FALSE,color="#E5001B",linecol="#E5001B",overlay=TRUE,rescaleoverlay=TRUE)

# add the genome labels
labelgenome(chrom,chromstart,chromend,side=1,scipen=20,n=3,line=.18,chromline=.5,scaleline=0.5,scale="Kb")

# set the legend colors
transparency = 0.5
col1 = col2rgb("blue")
finalcolor1 = rgb(col1[1],col1[2],col1[3],alpha=transparency * 255,max = 255)
col2 = col2rgb("#E5001B")
finalcolor2 = rgb(col2[1],col2[2],col2[3],alpha=transparency * 255,max = 255)

# add legend
legend("topright",inset=0.025,legend=c("DnaseI","ChIP-seq (CTCF)"),fill=c(finalcolor1,finalcolor2),border=c("blue","#E5001B"),text.font=2,cex=1.0)
@
\end{center}

Setting flip=TRUE is another method that can be used to compare tracks.


\begin{center}
<< fig = TRUE , echo = TRUE >>=
par(mfrow=c(2,1),mar=c(1,4,1,1))
# set the genomic regions
chrom            = "chr11"
chromstart       = 1955000
chromend         = 1960000

# plot chip-seq data
plotBedgraph(Sushi_ChIPSeq_CTCF.bedgraph,chrom,chromstart,chromend,transparency=.50,flip=FALSE,color="blue",linecol="blue")

# add y-axis
axis(side=2,las=2,tcl=.2)
mtext("Read Depth",side=2,line=1.75,cex=1,font=2)

# add legend
legend("topright",inset=0.025,legend=c("DnaseI","ChIP-seq (CTCF)"),fill=c(finalcolor1,finalcolor2),border=c("blue","#E5001B"),text.font=2,cex=1.0)

# plot dnaseI data
plotBedgraph(Sushi_DNaseI.bedgraph,chrom,chromstart,chromend,transparency=.50,flip=TRUE,color="#E5001B",linecol="#E5001B",overlay=FALSE)

# add y-axis
ylabs = axis(side=2,las=2,tcl=.2,at=pretty(par("yaxp")[c(1,2)]),labels=-1*pretty(par("yaxp")[c(1,2)]))
mtext("Read Depth",side=2,line=1.75,cex=1,font=2)

# add the genome labels
labelgenome(chrom,chromstart,chromend,side=3,scipen=20,n=3,line=.18,chromline=.5,scaleline=0.5,scale="Kb")

# set the legend colors
transparency = 0.5
col1 = col2rgb("blue")
finalcolor1 = rgb(col1[1],col1[2],col1[3],alpha=transparency * 255,max = 255)
col2 = col2rgb("#E5001B")
finalcolor2 = rgb(col2[1],col2[2],col2[3],alpha=transparency * 255,max = 255)
@
\end{center}

\end{document}

?axis
